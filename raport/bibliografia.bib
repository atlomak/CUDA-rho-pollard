@article{Montgomery1987,
   author = {Peter L Montgomery},
   journal = {Mathematics of Computation},
   pages = {243-264},
   title = {Speeding the Pollard and elliptic curve methods of factorization},
   volume = {48},
   url = {https://api.semanticscholar.org/CorpusID:4262792},
   year = {1987},
}
@article{Pollard1978,
   abstract = {We describe some novel methods to compute the index of any integer relative to a given primitive root of a prime p. Our first method avoids the use of stored tables and apparently requires 0(p) operations. Our second algorithm, which may be regarded as a method of catching kangaroos, is applicable when the index is known to lie in a certain interval; it requires 0(w) operations for an interval of width w, but does not have complete certainty of success. It has several possible areas of application , including the factorization of integers.},
   author = {J M Pollard},
   issue = {143},
   pages = {918-924},
   title = {Monte Carlo Methods for Index Computation (mod p)},
   volume = {32},
   year = {1978},
}
@book{Chrzeszczyk2010,
   author = {Andrzej ChrzÄ™szczyk},
   isbn = {9788360233672},
   pages = {328},
   title = {Algorytmy teorii liczb i kryptografii w przykladach},
   year = {2010},
}
@book{Stinson2021,
   author = {Douglas R. Stinson and Maura B. Paterson},
   edition = {IV},
   title = {Kryptografia. W teorii i praktyce},
   year = {2021},
}
@article{Teske2000,
   abstract = {We consider Pollard's rho method for discrete logarithm computation. Usually, in the analysis of its running time the assumption is made that a random walk in the underlying group is simulated. We show that this assumption does not hold for the walk originally suggested by Pollard: its performance is worse than in the random case. We study alternative walks that can be efficiently applied to compute discrete logarithms. We introduce a class of walks that lead to the same performance as expected in the random case. We show that this holds for arbitrarily large prime group orders, thus making Pollard's rho method for prime group orders about 20% faster than before.},
   author = {Edlyn Teske},
   issue = {234},
   journal = {MATHEMATICS OF COMPUTATION},
   title = {ON RANDOM WALKS FOR POLLARD'S RHO METHOD},
   volume = {70},
   year = {2000},
}
@book{Blake2005,
   author = {Ian F Blake and Gadiel Seroussi and Nigel Paul Smart},
   isbn = {9788320429510},
   pages = {236},
   title = {Krzywe eliptyczne w kryptografii},
   year = {2005},
}
@article{Menezes2001,
   author = {Alfred J. Menezes and Paul C. Van Oorshot and Scott A Vanstone},
   title = {Handbook of Applied Cryptography},
   year = {2001},
}
@misc{Oorschot,
   abstract = {A simple new technique of parallelizing methods for solving search problems which seek collisions in pseudorandom walks is presented. This technique can be adapted to a wide range of cryptanalytic problems which can be reduced to finding collisions. General constructions are given showing how to adapt the technique to finding discrete logarithms in cyclic groups, finding meaningful collisions in hash functions, and performing meet-in-the-middle attacks such as a known-plaintext attack on double encryption. The new technique greatly extends the reach of practical attacks, providing the most cost-effective means known to date for defeating: the small subgroup used in certain schemes based on discrete logarithms such as Schnorr, DSA, and elliptic curve cryptosystems; hash functions such as MD5, RIPEMD, SHA-1, MDC-2, and MDC-4; and double encryption and three-key triple encryption. The practical significance of the technique is illustrated by giving the design for three $10 million custom machines which could be built with current technology: one finds elliptic curve logarithms in GF(2 155) thereby defeating a proposed elliptic curve cryptosystem in expected time 32 days, the second finds MD5 collisions in expected time 21 days, and the last recovers a double-DES key from two known plaintexts in expected time 4 years, which is four orders of magnitude faster than the conventional meet-in-the-middle attack on double-DES. Based on this attack, double-DES offers only 17 more bits of security than single-DES.},
   author = {Paul C Van Oorschot and Michael J Wiener},
   keywords = {Cryptanalysis,Discrete logarithm,Double encryption,Elliptic curves,Hash colli-sion,Meet-in-the-middle attack,Parallel collision search},
   pages = {1-28},
   title = {Parallel Collision Search with Cryptanalytic Applications},
   volume = {12},
   year = {1999},
}
@article{Bernstein2012,
   abstract = {A major cryptanalytic computation is currently underway on multiple platforms, including standard CPUs, FPGAs, PlayStations and GPUs, to break the Certicom ECC2K-130 challenge. This challenge is to compute an elliptic-curve discrete logarithm on a Koblitz curve over F 2 131. Optimizations have reduced the cost of the computation to approximately 2 77 bit operations in 2 61 iterations. GPUs are not designed for fast binary-field arithmetic; they are designed for highly vectorizable floating-point computations that fit into very small amounts of static RAM. This paper explains how to optimize the ECC2K-130 computation for this unusual platform. The resulting GPU software performs more than 63 million iterations per second, including 320 million F 2 131 multiplications per second, on a $500 NVIDIA GTX 295 graphics card. The same techniques for finite-field arithmetic and elliptic-curve arithmetic can be reused in implementations of larger Permanent ID of this document: 1957e89d79c5a898b6ef308dc10b0446. systems that are secure against similar attacks, making GPUs an interesting option as coprocessors when a busy Internet server has many elliptic-curve operations to perform in parallel.},
   author = {Daniel J Bernstein and Hsieh-Chung Chen and Chen-Mou Cheng and Tanja Lange and Ruben Niederhagen and Peter Schwabe and Bo-Yin Yang},
   keywords = {Elliptic Curve Cryptog-raphy,Graphics Processing Unit (GPU),Pollard rho,qhasm},
   title = {ECC2K-130 on NVIDIA GPUs},
   url = {http://www.ecc-challenge.info},
   year = {2012},
}
@article{Goldberg,
   abstract = {This paper chronicles our experiences using CUDA to implement a parallelized variant of Pollard's rho algorithm to solve discrete logarithms in groups with cryptographically large moduli but smooth order using commodity GPUs. We first discuss some key design constraints imposed by modern GPU architectures and the CUDA framework, and then explain how we were able to implement efficient arbitrary-precision modular multiplication within these constraints. Our implementation can execute roughly 51.9 million 768-bit modular multiplications per second-or a whopping 840 million 192-bit modular multiplications per second-on a single Nvidia Tesla M2050 GPU card, which is a notable improvement over all previous results on comparable hardware. We leverage this fast modular multiplication in our implementation of the parallel rho algorithm, which can solve discrete logarithms modulo a 1536-bit RSA number with a 2 55-smooth totient in less than two minutes. We conclude the paper by discussing implications to discrete logarithm-based cryptosystems, and by pointing out how efficient implementations of parallel rho (or related algorithms) lead to trapdoor discrete logarithm groups; we also point out two potential cryptographic applications for the latter. Our code is written in C for CUDA and PTX; it is open source and freely available for download online.},
   author = {Ryan Henry and Ian Goldberg},
   title = {Solving Discrete Logarithms in Smooth-Order Groups with CUDA 1},
   url = {http://cacr.uwaterloo.ca/},
}

@misc{Boss2015,
   author = {Erik Boss},
   title = {Solving prime-field ECDLPs on GPUs with OpenCL},
   year = {2015},
}
